@page "/menuPrincipal"
@inject IHttpServicio http
@inject SesionUsuario Sesion
@inject NavigationManager navHttp

<PageTitle>Menú Principal</PageTitle>

<h1>Menú Principal</h1>

<p>Bienvenido, @nombreUsuario</p>

<button class="btn btn-success" @onclick="BuscarPartida" disabled="@buscandoPartida">@mensajeEstado</button>

@if (mostrarPopupConfirmar)
{
    <div style="position: fixed; top: 20px; right: 20px; background-color: lightblue; padding: 15px; border: 1px solid blue; border-radius: 5px; z-index: 1000;">
        @notificacion
        <button class="btn btn-primary" @onclick="ConfirmarPartida">Confirmar</button><button class="btn btn-secondary">Rechazar</button>
    </div>
}

@code {

    private string nombreUsuario = "usuario sin perfil";
    private string nombreRival = string.Empty;
    private bool buscandoPartida = false;
    private bool mostrarPopupConfirmar = false;
    private string mensajeEstado = "Buscar Partida";
    private int partidaIdEncontrada;
    private int perfilRivalId;
    private int perfilUsuarioId;
    private HubConnection? hubConnection;
    BuscarPartidaSolicitudDTO buscarPartida = new BuscarPartidaSolicitudDTO { PerfilUsuarioId = 0 };
    private string notificacion = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var httpResp = await http.Get<PerfilUsuarioDTO>($"https://localhost:7192/api/PerfilUsuario/{Sesion.UsuarioId}");
        if (!httpResp.Error && httpResp.Respuesta != null)
        {
            nombreUsuario = httpResp.Respuesta.Nombre;
            perfilUsuarioId = httpResp.Respuesta.Id;
            buscarPartida = new BuscarPartidaSolicitudDTO
            {
                PerfilUsuarioId = perfilUsuarioId
            };
        }
        hubConnection = new HubConnectionBuilder()
           .WithUrl("https://localhost:7192/juegoHub")
           .WithAutomaticReconnect()
           .Build();

        hubConnection.On<string>("RecibirNotificacionPartida", (mensaje) =>
        {
            InvokeAsync(() =>
            {
                mostrarPopupConfirmar = true;
                notificacion = mensaje;
                StateHasChanged();
            });

        });

        await hubConnection.StartAsync();

    }



    private async Task BuscarPartida()
    {
        buscandoPartida = true;
        mensajeEstado = "⏳ Buscando partida...";

        //var httpResp = await http.Post<int, BuscarPartidaRespuestaDTO>($"https://localhost:7192/api/juego/buscarPartida/{perfilUsuarioId}");

        var httpResp = await http.Post<BuscarPartidaSolicitudDTO, BuscarPartidaRespuestaDTO>($"https://localhost:7192/api/juego/buscarPartida", buscarPartida);

        if (!httpResp.Error && httpResp.Respuesta != null)
        {

            if(hubConnection != null)
            {
                await hubConnection.InvokeAsync("UnirsePartida", httpResp.Respuesta.PartidaId);
            }


            /*
            if (httpResp.Respuesta.PerfilUsuarioRivalId != 0)
            {
                var httpNombreRival = await http.Get<PerfilUsuarioDTO>($"https://localhost:7192/api/PerfilUsuario/{httpResp.Respuesta.PerfilUsuarioRivalId}");
                if(!httpNombreRival.Error && httpNombreRival.Respuesta != null) nombreRival = httpNombreRival.Respuesta.Nombre;

                }*/

            mensajeEstado = httpResp.Respuesta.Mensaje;

            while(buscandoPartida == true)
            {
                var httpEstadoPartida = await http.Get<RevisarEstadoDTO>($"https://localhost:7192/api/juego/estado/{buscarPartida.PerfilUsuarioId}");
                if(!httpEstadoPartida.Error && httpEstadoPartida.Respuesta != null)
                {
                    buscandoPartida = false;
                    mensajeEstado = "Buscar Partida";
                }
            }

        }
        else
        {
            var dtoRespuesta = await httpResp.HttpResponseMessage.Content.ReadFromJsonAsync<BuscarPartidaRespuestaDTO>();
            mensajeEstado = $"❌ Error: {dtoRespuesta?.Mensaje}";
            buscandoPartida = false;
        }



    }

    private async Task ConfirmarPartida()
    {
        var httpResp = await http.Post<BuscarPartidaSolicitudDTO, MensajeRespuestaDTO>("https://localhost:7192/api/juego/confirmarPartida/", buscarPartida);

        if (!httpResp.Error)
        {
            var respPartida = await http.Get<int>($"https://localhost:7192/api/juego/obtenerPartidaPorJugador/{perfilUsuarioId}");

            notificacion = "Partida confirmada. Esperando al otro jugador...";
            StateHasChanged();

            while (respPartida.Respuesta == 0)
            {    
                await Task.Delay(1000);
                respPartida = await http.Get<int>($"https://localhost:7192/api/juego/obtenerPartidaPorJugador/{perfilUsuarioId}");
            }


            var respPartidaComenzada = await http.Get<bool>($"https://localhost:7192/api/juego/revisarPartida/{respPartida.Respuesta}");
            navHttp.NavigateTo($"/juego/{respPartida.Respuesta}");

        }
        else
        {
            notificacion = "Error al confirmar la partida.";
        }
    }


}
