@page "/juego/{PartidaId:int}"
@inject SesionUsuario Sesion
@inject IHttpServicio http
@inject HttpClient httpClient
@inject IJSRuntime js

<PageTitle>Partida</PageTitle>

<h1>Partida #@PartidaId</h1>

@if(cartasJugador.Count == 0)
{
    <p>Cargando cartas...</p>
}
else
{
    <h3>Cartas del Jugador:</h3>

    <div class="testeo">
        
        @foreach (var carta in cartasJugador)
        {
            <Carta carta="carta"/>
        }
    </div>

    <div class="mazo">
        <p>Cartas: @Mazo</p>
    </div>

    <h3>Cartas del Rival:</h3>
    <div class="testeo">
        
        @foreach (var carta in cartasRival)
        {
            <Carta carta="carta"/>
        }
    </div>
}

@code {
    [Parameter] public int PartidaId { get; set; }

    private List<EstadoCartaDTO> cartasJugador = new List<EstadoCartaDTO>();
    private int UsuarioPartidaId;
    private int RivalUsuarioPartidaId;
    private int Mazo = 0;
    private List<EstadoCartaDTO> cartasRival = new List<EstadoCartaDTO>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var idStr = await js.InvokeAsync<string>("localStorage.getItem", "UsuarioId");
            if (!string.IsNullOrEmpty(idStr) && int.TryParse(idStr, out var id))
            {
                Sesion.UsuarioId = id;
                await CargarPartida();

                foreach (var carta in cartasJugador)
                {
                    Mazo++;
                }
            }
            StateHasChanged();
        }
    }

    private async Task CargarPartida()
    {
        try
        {

            var httpRespUsuarioPartida = await http.Get<int>($"api/Juego/buscarUsuarioPartida/{Sesion.UsuarioId}");
            if (!httpRespUsuarioPartida.Error)
            {
                UsuarioPartidaId = httpRespUsuarioPartida.Respuesta;
            }
            else
            {
                Console.WriteLine("Error al obtener el perfil del usuario.");
            }

            var httpResp = await http.Get<List<EstadoCartaDTO>>($"api/Juego/estadoCarta/usuario/{UsuarioPartidaId}");
            if (!httpResp.Error && httpResp.Respuesta != null)
            {
                cartasJugador = httpResp.Respuesta;
            }
            else
            {
                Console.WriteLine("Error al obtener las cartas.");
            }

            var httpRespRivalId = await http.Get<int>($"api/Juego/usuarioPartida/{UsuarioPartidaId}");
            if (!httpRespRivalId.Error)
            {
                RivalUsuarioPartidaId = httpRespRivalId.Respuesta;
            }
            else
            {
                Console.WriteLine("Error al obtener el perfil del rival.");
            }

            var httpRespRival = await http.Get<List<EstadoCartaDTO>>($"api/Juego/estadoCarta/usuario/{RivalUsuarioPartidaId}");
            if(!httpRespRival.Error && httpRespRival.Respuesta != null)
            {
                cartasRival = httpRespRival.Respuesta;
            }
            else
            {
                Console.WriteLine("Error al obtener las cartas del rival.");
            }

        }
        catch (Exception e)
        {
            Console.WriteLine($"Error al inicializar la partida: {e.Message}");
        }
    }

}