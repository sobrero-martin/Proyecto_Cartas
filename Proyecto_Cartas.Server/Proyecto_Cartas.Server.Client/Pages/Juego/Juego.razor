@page "/juego/{PartidaId:int}"
@inject SesionUsuario Sesion
@inject IHttpServicio http
@inject HttpClient httpClient
@inject IJSRuntime js

<PageTitle>Partida</PageTitle>

<h1>Partida #@PartidaId</h1>

@if(cartasJugador.Count == 0)
{
    <p>Cargando cartas...</p>
}
else
{
    <h3>Cartas del Rival:</h3>
    <div class="testeo">
        @foreach(var carta in cartasRival)
        {
            <Carta carta="carta"/>
        }
    </div>


    <h3>Cartas del Jugador:</h3>

    <div class="testeo">
        
        @foreach (var carta in cartasJugador)
        {
            <Carta carta="carta"/>
        }
    </div>

    <div class="mazo">
        <p>Cartas: @Mazo</p>
    </div>
    <h3>Cartas en mano:</h3>
    <div class="mano">
        
        @foreach (var carta in cartasMano)
        {
            <Carta carta="carta"/>
        }
    </div>

    <button class="btn btn-primary" @onclick="RobarCarta">Robar Carta</button>

    <button class="btn btn-secondary" @onclick="Actualizar">Actualizar</button>
}

@code {
    [Parameter] public int PartidaId { get; set; }

    private List<EstadoCartaDTO> cartasJugador = new List<EstadoCartaDTO>();
    private int UsuarioPartidaId;
    private int Mazo = 0;
    private List<EstadoCartaDTO> cartasMano = new List<EstadoCartaDTO>();
    private List<EstadoCartaDTO> cartasRival = new List<EstadoCartaDTO>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var idStr = await js.InvokeAsync<string>("localStorage.getItem", "UsuarioId");
            if (!string.IsNullOrEmpty(idStr) && int.TryParse(idStr, out var id))
            {
                Sesion.UsuarioId = id;
                await CargarPartida();

                await CartasEnMazo();
            }
            StateHasChanged();
        }
    }

    private async Task CargarPartida()
    {
        try
        {

            var httpRespUsuarioPartida = await http.Get<int>($"api/Juego/buscarUsuarioPartida/{Sesion.UsuarioId}");
            if (!httpRespUsuarioPartida.Error)
            {
                UsuarioPartidaId = httpRespUsuarioPartida.Respuesta;
            }
            else
            {
                Console.WriteLine("Error al obtener el perfil del usuario.");
            }

            await CartasDelJugador();

            await CartasDelRival();

            await CartasEnMano();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error al inicializar la partida: {e.Message}");
        }
    }

    private async Task CartasEnMano()
    {
        try
        {
            var httpResp = await http.Get<List<EstadoCartaDTO>>($"api/Juego/estadoCarta/filtrarPosicion/{UsuarioPartidaId}/Mano");
            if(!httpResp.Error && httpResp.Respuesta != null)
            {
                cartasMano = httpResp.Respuesta;
            }
            else
            {
                Console.WriteLine("Error al obtener las cartas en mano.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error al obtener las cartas en mano: {e.Message}");
        }
    }

    private async Task RobarCarta()
    {
        try
        {
            var httpResp = await httpClient.PutAsync($"api/Juego/estadoCarta/robarCarta/{UsuarioPartidaId}/1", null);
            if (httpResp.IsSuccessStatusCode)
            {
                await Actualizar();
            }
            else
            {
                Console.WriteLine("Error al robar.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error al robar carta: {e.Message}");
        }
    }

    private async Task CartasEnMazo()
    {
        try
        {
            var httpResp = await http.Get<List<EstadoCartaDTO>>($"api/Juego/estadoCarta/filtrarPosicion/{UsuarioPartidaId}/Mazo");
            if (!httpResp.Error && httpResp.Respuesta != null)
            {
                Mazo = httpResp.Respuesta.Count();

            }
            else
            {
                Console.WriteLine("Error al obtener las cartas en el mazo.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error al obtener las cartas en el mazo: {e.Message}");
        }
    }

    private async Task CartasDelJugador()
    {
        try 
        { 
            var httpResp = await http.Get<List<EstadoCartaDTO>>($"api/Juego/estadoCarta/usuario/{UsuarioPartidaId}");
            if (!httpResp.Error && httpResp.Respuesta != null)
            {
                cartasJugador = httpResp.Respuesta;
            }
            else
            {
                Console.WriteLine("Error al obtener las cartas.");
            } 
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error al obtener las cartas: {e.Message}");
        }

    }

    private async Task CartasDelRival()
    {
        try
        {
            var httpRespRivalId = await http.Get<int>($"api/Juego/usuarioPartida/{UsuarioPartidaId}");
            if (!httpRespRivalId.Error)
            {
                var rivalId = httpRespRivalId.Respuesta;
                var httpResp = await http.Get<List<EstadoCartaDTO>>($"api/Juego/estadoCarta/usuario/{rivalId}");
                if (!httpResp.Error && httpResp.Respuesta != null)
                {
                    cartasRival = httpResp.Respuesta;
                }
                else
                {
                    Console.WriteLine("Error al obtener las cartas.");
                }
            }
            else
            {
                Console.WriteLine("Error al obtener el ID del rival.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error al obtener las cartas del rival: {e.Message}");
        }
    }

    private async Task Actualizar()
    {
        await CartasDelJugador();
        await CartasDelRival();
        await CartasEnMazo();
        await CartasEnMano();
        StateHasChanged();

    }
}