@page "/login"
@inject IHttpServicio http
@inject SesionUsuario Sesion
@inject NavigationManager navHttp
@inject IJSRuntime js

<PageTitle>Login</PageTitle>

<h1>Login</h1>
<br />
<form>
    <label for="email">Email:</label><br />
    <input class="loginInput" type="email" @bind="Email" placeholder="Enter your email" /><br />
    <br />
    <label for="password">Password:</label><br />
    <input class="loginInput" type="password" @bind="Password" placeholder="Enter your password" /><br />
    <br />
    <button class="btn loginButton" type="button" @onclick="OnLogin">Login</button> <button class="btn loginButton" type="button" @onclick="OnRegister">Register</button>
    <br />
    <p style="margin: 20px">@LoginStatus</p>
</form>
@if (mostrarPopup)
{
    <div style="position: fixed; top: 20px; right: 20px; background-color: lightblue; padding: 15px; border: 1px solid blue; border-radius: 5px; z-index: 1000;">
        @mensajeRecibido
        <button style="margin-left: 10px;" @onclick="CerrarPopup">Cerrar</button>
    </div>
}


@code{
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string LoginStatus { get; set; } = string.Empty;
    private HubConnection? hubConnection;
    private string mensajeRecibido = string.Empty;
    private bool mostrarPopup = false;

    private void CerrarPopup()
    {
        mostrarPopup = false;
    }

    private async Task OnLogin()
    {
        var usuario = new UsuarioAuthDTO()
        {
            Email = Email,
            Password = Password
        };

        var httpResp = await http.Post<UsuarioAuthDTO, int>("https://localhost:7192/api/usuario/login", usuario);

        if (!httpResp.Error)
        {
            var id = httpResp.Respuesta;
            if (id != 0)
            {
                Sesion.UsuarioId = id;
                await js.InvokeVoidAsync("localStorage.setItem", "UsuarioId", id.ToString());

                LoginStatus = "✅ Login successful!";
              
                navHttp.NavigateTo("/menuPrincipal");
            }   
        }
        else
        {
            var error = httpResp.ObtenerError();
            var mensajeError = await httpResp.HttpResponseMessage.Content.ReadAsStringAsync();
            LoginStatus = $"❌ {error}: {mensajeError}";
        }
    }
    
    private async Task OnRegister()
    {
        var nuevoUsuario = new UsuarioAuthDTO()
        {
            Email = Email,
            Password = Password
        };

        var httpResp = await http.Post<UsuarioAuthDTO, MensajeRespuestaDTO>("https://localhost:7192/api/Usuario/register", nuevoUsuario);

        if (!httpResp.Error)
        {
            LoginStatus = $"✅ {httpResp.Respuesta?.Mensaje}";
        }
        else
        {
            var mensajeError = await httpResp.HttpResponseMessage.Content.ReadFromJsonAsync<MensajeRespuestaDTO>();
            LoginStatus = $"❌ Registration failed: {mensajeError?.Mensaje}";
        }
    }
}